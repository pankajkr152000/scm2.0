package com.scm.config;

import java.util.Arrays;

import org.hibernate.event.spi.PreDeleteEvent;
import org.hibernate.event.spi.PreDeleteEventListener;
import org.hibernate.event.spi.PreInsertEvent;
import org.hibernate.event.spi.PreInsertEventListener;
import org.hibernate.event.spi.PreUpdateEvent;
import org.hibernate.event.spi.PreUpdateEventListener;
import org.hibernate.persister.entity.EntityPersister;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.scm.utils.Utility;

/**
 * Event listener for capturing Hibernate entity persistence operations
 * (INSERT, UPDATE, DELETE).
 *
 * <p>
 * This listener hooks into Hibernate’s event system to capture
 * the final SQL-like query along with parameter values before the actual
 * operation is executed in the database.
 * </p>
 *
 * <p>
 * <b>Use cases:</b>
 * </p>
 * <ul>
 * <li>Debugging SQL queries generated by Hibernate</li>
 * <li>Auditing data changes before they are persisted</li>
 * <li>Learning how Hibernate translates entity operations into SQL</li>
 * </ul>
 *
 * <p>
 * <b>Captured details:</b>
 * </p>
 * <ul>
 * <li>Action type (INSERT, UPDATE, DELETE)</li>
 * <li>Table name</li>
 * <li>Property names and values</li>
 * <li>Final query string with values injected</li>
 * <li>Raw parameter array (for debugging)</li>
 * </ul>
 *
 * <p>
 * <b>Note:</b>
 * </p>
 * <ul>
 * <li>This implementation stores the last captured query in static fields,
 * so it is not thread-safe in multi-threaded environments.
 * For production, consider using {@link ThreadLocal} instead.</li>
 * </ul>
 */
@Component
public class QueryCaptureEventListener implements
        PreInsertEventListener,
        PreUpdateEventListener,
        PreDeleteEventListener {

    /** Logger instance for query logging */
    private static final Logger log = LoggerFactory.getLogger(QueryCaptureEventListener.class);

    /** Stores the last captured query as a string */
    private static String lastQuery;

    /** Stores the last captured parameter values */
    private static Object[] lastParams;

    @Override
    public boolean onPreInsert(PreInsertEvent event) {
        capture(event.getPersister(), event.getState(), "INSERT", event.getId());
        return false;
    }

    @Override
    public boolean onPreUpdate(PreUpdateEvent event) {
        capture(event.getPersister(), event.getState(), "UPDATE", event.getId());
        return false;
    }

    @Override
    public boolean onPreDelete(PreDeleteEvent event) {
        capture(event.getPersister(), event.getDeletedState(), "DELETE", event.getId());
        return false;
    }

    /**
     * Builds a human-readable SQL-like query string based on action type
     * and logs it.
     */
    private void capture(EntityPersister persister, Object[] state, String action, Object id) {
        String[] propertyNames = persister.getPropertyNames();
        String tableName = Utility.getOnlyEntityName(persister.getEntityName());
        StringBuilder sb = new StringBuilder(action);
        if(action.equalsIgnoreCase("INSERT"))
            sb.append(" INTO ").append(tableName);
        else
            sb.append(" ").append(tableName);

        switch (action) {
            case "INSERT" -> {
                sb.append(" (").append(String.join(", ", propertyNames)).append(") VALUES (");
                for (int i = 0; i < state.length; i++) {
                    Object val = state[i];
                    sb.append(val == null ? "NULL" : (val instanceof String ? "'" + val + "'" : val));
                    if (i < state.length - 1)
                        sb.append(", ");
                }
                sb.append(")");
            }
            case "UPDATE" -> {
                sb.append(" SET ");
                for (int i = 0; i < state.length; i++) {
                    Object val = state[i];
                    sb.append(propertyNames[i]).append("=");
                    sb.append(val == null ? "NULL" : (val instanceof String ? "'" + val + "'" : val));
                    if (i < state.length - 1)
                        sb.append(", ");
                }
                sb.append(" WHERE ").append(persister.getIdentifierPropertyName()).append("=").append(id);
            }
            case "DELETE" -> sb.append(" WHERE ").append(persister.getIdentifierPropertyName()).append("=").append(id);
            default -> {
                sb.append(sb.toString());
            }
        }

        lastQuery = sb.toString();
        lastParams = state;

        // ✅ Auto log query + params
        log.info("Hibernate Captured Query: {}", lastQuery);
        log.debug("Hibernate Query Params: {}", Arrays.toString(lastParams));
    }

    public static String getLastQuery() {
        return lastQuery;
    }

    public static Object[] getLastParams() {
        return lastParams;
    }

    public static String getLastParamsAsString() {
        return Arrays.toString(lastParams);
    }
}
